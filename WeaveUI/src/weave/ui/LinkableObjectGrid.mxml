<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<!---
LinkableObjectGrid
<br/>This class is a temporary solution designed specifically for the EquationEditor
@kmanohar
-->

<mx:DataGrid xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
		 dragEnabled="true"
		 dropEnabled="true"
		 dragMoveEnabled="true"
		 allowMultipleSelection="true"
		 showDataTips="false"
		 width="100%" minWidth="0"
		 editable="true"
		 itemEditEnd="variableNameChangeHandler(event)"
		 >
	<mx:columns>		
		<mx:DataGridColumn id="nameColumn" headerText="{lang('Edit variable name:')}" labelFunction="getObjectName" editable="true"/>
		<mx:DataGridColumn headerText="{lang('Variable value')}" labelFunction="getItemLabel" editable="false"/>
	</mx:columns>
	
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.IUIComponent;
			import mx.events.DataGridEvent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			import mx.utils.StringUtil;
			
			import weave.api.core.ILinkableDynamicObject;
			import weave.api.core.ILinkableHashMap;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IAttributeColumn;
			import weave.core.CallbackJuggler;
			import weave.utils.ColumnUtils;
						
			private const _hashMapJuggler:CallbackJuggler = new CallbackJuggler(this, refreshLabels, true);
			private const _dynamicObjectJuggler:CallbackJuggler = new CallbackJuggler(this, updateDataProvider, true);
			private const _childListJuggler:CallbackJuggler = new CallbackJuggler(this, updateDataProvider, true);
			
			public function get hashMap():ILinkableHashMap
			{
				return _hashMapJuggler.target as ILinkableHashMap;
			}
			public function set hashMap(value:ILinkableHashMap):void
			{
				if (value)
					dynamicObject = null;
				
				_hashMapJuggler.target = value;
				_childListJuggler.target = value && value.childListCallbacks;
				nameColumn.editable = value != null;
			}
			
			public function get dynamicObject():ILinkableDynamicObject
			{
				return _dynamicObjectJuggler.target as ILinkableDynamicObject;
			}
			public function set dynamicObject(value:ILinkableDynamicObject):void
			{
				if (value)
				{
					hashMap = null;
					rowCount = 1;
				}
				
				_dynamicObjectJuggler.target = value;
			}
			
			private function refreshLabels():void
			{
				if (!stage)
				{
					callLater(refreshLabels);
					return;
				}
				labelFunction = labelFunction; // this refreshes the labels
			}
			
			private function updateDataProvider():void
			{
				if (dynamicObject)
				{
					dataProvider = dynamicObject.internalObject;
				}
				else if (hashMap)
				{
					dataProvider = hashMap.getObjects();
				}

				var view:ICollectionView = dataProvider as ICollectionView;
				if (view)
					view.refresh();
			}
			
			public function removeAllItems():void
			{
				if (hashMap)
					hashMap.removeAllObjects();
				else if (dynamicObject)
					dynamicObject.removeObject();
			}
				
			public function removeSelectedItem():void
			{
				if (hashMap && selectedIndex >= 0)
				{
					var names:Array = [];
					for (var i:int = 0; i < selectedIndices.length; i++)
					{
						var selectedIndex:int = selectedIndices[i];
						
						names.push(hashMap.getName(dataProvider[selectedIndex] as ILinkableObject) );
					}	
					
					for each(var name:String in names)
					{
						hashMap.removeObject(name);
					}
				}
				else if (dynamicObject)
				{
					dynamicObject.removeObject();
				}
			}
			
			public function getItemLabel(item:Object, ..._):String
			{
				var label:String = "";
				
				if(hashMap)
					label = hashMap.getName(item as ILinkableObject);
				if(dynamicObject)
					label = dynamicObject.globalName || getQualifiedClassName(item).split("::")[1];
				
				if (item is IAttributeColumn)
				{
					var col:IAttributeColumn = item as IAttributeColumn;
					var title:String = ColumnUtils.getTitle(col);
					var keyType:String = ColumnUtils.getKeyType(col);
					var dataType:String = ColumnUtils.getDataType(col);
					
					if (dataType && keyType)
						return StringUtil.substitute("{0} ({1} -> {2})", title, keyType, dataType);
					if (keyType)
						return StringUtil.substitute("{0} (Key Type: {1})", title, keyType);
					if (dataType)
						return StringUtil.substitute("{0} (Data Type: {1})", title, dataType);
					
					return title;
				}
				
				return label;
			}
			
			private function updateHashMapNameOrder():void
			{
				validateNow();
				
				if (hashMap)
				{
					// update object map name order based on what is in the data provider
					var newNameOrder:Array = [];
					for (var i:int = 0; i < dataProvider.length; i++)
					{
						var object:ILinkableObject = dataProvider[i] as ILinkableObject;
						if (object)
							newNameOrder[i] = hashMap.getName(object);
					}
					hashMap.setNameOrder(newNameOrder);
				}
			}
			
			private function removeObjectsMissingFromDataProvider():void
			{
				if (hashMap)
				{
					var objects:Array = hashMap.getObjects();
					for each (var object:ILinkableObject in objects)
					{
						if(!(this.dataProvider as ArrayCollection).contains(object))
							hashMap.removeObject(hashMap.getName(object));
					}
				}
				else if(dynamicObject)
				{
					if(!(this.dataProvider as ArrayCollection).contains(dynamicObject.internalObject))
						dynamicObject.removeObject();
				}
			}
			
			// called when something is being dragged on top of this list
			override protected function dragOverHandler(event:DragEvent):void
			{
				super.dragOverHandler(event);
				
				DragManager.showFeedback(DragManager.MOVE);
			}
			
			// called when something is dropped into this list
			override protected function dragDropHandler(event:DragEvent):void
			{			
				//need to add re-order functionality				
				//if(event.dragInitiator == this)
				//super.dragDropHandler(event);
				
				//hides the drop visual lines
				event.currentTarget.hideDropFeedback(event);
				mx_internal::resetDragScrolling(); // if we don't do this, list will scroll when mouse moves even when not dragging something
				
				if(event.dragInitiator == this)
				{
					event.action = DragManager.MOVE;
					super.dragDropHandler(event);
					
					updateHashMapNameOrder();
				}
				else
				{
					var object:ILinkableObject;
					var items:Array = event.dragSource.dataForFormat("items") as Array;
					if (hashMap)
					{
						var prevNames:Array = hashMap.getNames();
						var newNames:Array = [];
						var dropIndex:int = calculateDropIndex(event);
						
						// copy each item in the list, in order
						for (var i:int = 0; i < items.length; i++)
						{
							object = items[i] as ILinkableObject;
							if (hashMap.getName(object) == null)
							{
								var newObject:ILinkableObject = hashMap.requestObjectCopy(null, object);
								newNames.push(hashMap.getName(newObject));
							}
						}
						
						// insert new names inside prev names list and save the new name order
						var args:Array = newNames;
						newNames.unshift(dropIndex, 0);
						prevNames.splice.apply(null, args);
						hashMap.setNameOrder(prevNames);
					}
					else if (dynamicObject && items.length > 0)
					{
						// only copy the first item in the list
						dynamicObject.requestLocalObjectCopy(items[0]);
					}
				}
			}
			
			// called when something is dragged on top of this list
			override protected function dragEnterHandler(event:DragEvent):void
			{
				if (event.dragSource.hasFormat("items"))
				{
					var items:Array = event.dragSource.dataForFormat("items") as Array;
					if (items[0] is ILinkableObject)
						DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
				}
			}
			
			public var defaultDragAction:String = DragManager.COPY;
			
			// called when something in this list is dragged and dropped somewhere else
			override protected function dragCompleteHandler(event:DragEvent):void
			{
				if (event.shiftKey)
					event.action = DragManager.MOVE;
				else if (event.ctrlKey)
					event.action = DragManager.COPY;
				else
					event.action = defaultDragAction;
				
				super.dragCompleteHandler(event);
				
				removeObjectsMissingFromDataProvider();
			}
			
			private function getObjectName(item:Object, ..._):String
			{
				if (hashMap)
					return hashMap.getName(item as ILinkableObject);
				if (dynamicObject)
					return dynamicObject.globalName;
				return null;
			}
			
			protected function variableNameChangeHandler(event:DataGridEvent):void
			{
				var oldName:String = hashMap.getName(event.itemRenderer.data as ILinkableObject);
				var grid:DataGrid = event.target as DataGrid;
				
				if (grid)
				{
					var col:int = event.columnIndex;
					var field:String = (grid.columns[col] as DataGridColumn).editorDataField;
					var newValue:String = grid.itemEditorInstance[field];
					
					if (hashMap && newValue && hashMap.getNames().indexOf(newValue) < 0)
						hashMap.renameObject(oldName, newValue);
					
					if (dynamicObject && newValue != dynamicObject.globalName)
						dynamicObject.globalName = newValue;
				}
			}
		]]>
	</mx:Script>
</mx:DataGrid>
