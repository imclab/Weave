<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:ui="weave.ui.*"
    xmlns="weave.ui.*"
    width="100%" height="100%">
    <mx:DataGrid id="grid" editable="true" itemEditEnd="callLater(afterItemEditEnd)" width="100%" height="100%" minWidth="0">
        <mx:columns>
            <mx:DataGridColumn headerText="Property" labelFunction="labelFunction" editable="false" width="{grid.width/3}"/>
            <mx:DataGridColumn id="valueCol" headerText="Value" dataField="value" editable="true" editorDataField="text">
				<mx:itemEditor>
					<mx:Component>
						<mx:Canvas width="100%">
							<mx:Script>
								<![CDATA[
									import weave.services.Admin;
									
									public function get text():String
									{
										if (comboBox.visible)
											return comboBox.text;
										return textInput.text;
									}
									
									override public function set data(_item:Object):void
									{
										var item:MetadataGridItem = _item as MetadataGridItem;
										var values:Array = Admin.instance.getSuggestedPropertyValues(item.property);
										if (values && values.length > 0)
										{
											// if current value is in the list, remove it and put it at the front.
											var index:int = values.indexOf(item.value);
											if (index > 0)
											{
												// make a copy of the array and put the item up front
												values = [item.value].concat(values);
												// remove the existing value, which has now been shifted by 1
												values.splice(index + 1, 1);
												comboBox.dataProvider = values;
											}
											else
												comboBox.dataProvider = values.concat();
											
											textInput.visible = false;
											comboBox.selectedIndex = -1;
											comboBox.text = item.value;
											comboBox.visible = true;
											comboBox.setFocus();
										}
										else
										{
											comboBox.dataProvider = null;
											comboBox.visible = false;
											
											textInput.visible = true;
											textInput.text = item.value;
											textInput.setFocus();
											textInput.setSelection(0, int.MAX_VALUE);
										}
									}
								]]>
							</mx:Script>
							<mx:TextInput id="textInput" width="{width}" height="{height}"/>
							<CustomComboBox id="comboBox" width="{width}" height="{height}" editable="true" fontWeight="normal"/>
						</mx:Canvas>
					</mx:Component>
				</mx:itemEditor>
			</mx:DataGridColumn>
        </mx:columns>
    </mx:DataGrid>
	<Indent label="Add property:">
		<CustomComboBox id="newPropCombo" editable="true" enter="addProp();" change="if (newPropCombo.selectedIndex >= 0) addProp();" width="100%"/>
        <mx:Button id="addPropButton" label="Add property" click="addProp()" enabled="{newPropCombo.text ? true : false}"/>
	</Indent>
<mx:Script>
<![CDATA[
	import mx.utils.ObjectUtil;
	import mx.collections.ArrayCollection;
	import mx.collections.ListCollectionView;
	import mx.controls.dataGridClasses.DataGridColumn;
	import mx.events.CollectionEvent;
	
	import weave.core.UIUtils;
	
	/**
	 * Set this to the list of property names you want to display in the drop-down box for adding a new property. 
	 */
	[Bindable] public var selectablePropertyNames:Array = [];
	
    private function emitMetaChanged(o:Object = null):void
    {
        dispatchEvent(new Event("metaChanged"));
    }
    private static function labelFunction(item:MetadataGridItem, column:DataGridColumn):String
    {
		if (item.oldValue != item.value && (item.oldValue || item.value))
		{
			return "*" + item.property;
		}
		
        /* TODO: Pretty formatting to make it clear that these prefixes aren't part of the name.*/
		
//		if (!item.oldValue)
//			return (item.value ? '[ADDED] ' : '[NEW] ') + item.property;
//		
//		if (!item.value)
//			return '[DELETED] ' + item.property;
//		
//		if (item.oldValue != item.value)
//			return '[CHANGED] ' + item.property;
		
		return item.property;
    }
    [Bindable(event="metaChanged")] public function get metadata():Object
    {
        /* Convert from the grid's dataProvider to an object that is expected. */
        var lcv:ListCollectionView = grid.dataProvider as ListCollectionView;
        if (lcv == null) return {};
        var rows:Array = lcv.toArray();
        var destmeta:Object = new Object();
        for each (var row:MetadataGridItem in rows)
        {
            if (!row.value)
            {
                if (row.oldValue)
                    destmeta[row.property] = null;
                else
                    continue; /* If a nonoriginal property was deleted 
                                we don't need other components to hear about it. */
            }
            else
                destmeta[row.property] = row.value;
        }
        return destmeta;
    }
	private function updateMissingPropNames():void
	{
		var rows:ArrayCollection = grid.dataProvider as ArrayCollection;
		var missingPropNames:Array = selectablePropertyNames.concat();
		for each (var item:MetadataGridItem in rows)
		{
			// exclude this prop from missingPropNames
			var index:int = missingPropNames.indexOf(item.property);
			if (index >= 0)
				missingPropNames.splice(index, 1);
		}
		missingPropNames.sort(propertySort);
		newPropCombo.dataProvider = missingPropNames;
		newPropCombo.selectedIndex = -1;
	}
    public function set metadata(srcmeta:Object):void
    {
        /* Convert from an object to a format expected by the dataProvider */
        var rows:Array = new Array();
        for (var prop:String in srcmeta)
			rows.push(new MetadataGridItem(prop, srcmeta[prop]));
		rows.sort(propertySort);
        grid.dataProvider = rows;
        (grid.dataProvider as ListCollectionView).addEventListener(CollectionEvent.COLLECTION_CHANGE, emitMetaChanged);
		updateMissingPropNames();
        dispatchEvent(new Event("metaChanged"));
    }
    public function addProp():void
    {
        var prop:String = newPropCombo.text;
        newPropCombo.text = null;
        if (!prop)
		{
            UIUtils.componentPulse(newPropCombo);
			return;
		}
		
        var rows:ArrayCollection = grid.dataProvider as ArrayCollection;
		if (indexOfItemWithProperty(rows.source, 'property', prop) < 0)
		{
            rows.addItem(new MetadataGridItem(prop));
			updateMissingPropNames();
	        dispatchEvent(new Event("metaChanged"));
		}
		
		openEditor(prop);
    }
	
	private function indexOfItemWithProperty(array:Array, property:String, value:String):int
	{
		for (var i:int = 0; i < array.length; i++)
			if (array[i][property] == value)
				return i;
		return -1;
	}
	private function openEditor(property:String):void
	{
        var rows:ArrayCollection = grid.dataProvider as ArrayCollection;
		grid.editedItemPosition = {
			rowIndex: indexOfItemWithProperty(rows.source, 'property', property),
			columnIndex: indexOfItemWithProperty(grid.columns, 'dataField', 'value')
		};
	}
	
	private function afterItemEditEnd():void
	{
		/*
		// if user has added a property but not entered a value, remove the property
        var rows:ListCollectionView = grid.dataProvider as ListCollectionView;
		var length:int = rows.length;
		for (var i:int = length - 1; i >= 0; i--)
		{
			var item:MetadataGridItem = rows.getItemAt(i) as MetadataGridItem;
			if (!item.oldValue && !item.value)
				rows.removeItemAt(i);
		}
		if (rows.length != length)
		{
			rows.refresh();
			updateMissingPropNames();
		}
		*/
	}
	
	/**
	 * This function compares two MetadataGridItem objects by comparing the property names.
	 * Items will be sorted according to preferredMetadataOrder.
	 * @param a The first value to compare, either a MetadataGridItem or a String.
	 * @param b The second value to compare, either a MetadataGridItem or a String.
	 * @return A value of -1, 0, or 1, which is used by Array.sort().
	 */
	private function propertySort(a:Object, b:Object):int
	{
		if (a is MetadataGridItem)
			a = (a as MetadataGridItem).property;
		if (b is MetadataGridItem)
			b = (b as MetadataGridItem).property;
		var order:Array = preferredMetadataOrder;
		var ia:int = order.indexOf(a);
		var ib:int = order.indexOf(b);
		if (ia >= 0 && ib >= 0)
			return ObjectUtil.numericCompare(ia, ib);
		if (ia >= 0)
			return -1;
		if (ib >= 0)
			return 1;
		
		return ObjectUtil.stringCompare(a as String, b as String, true);
	}
	private const preferredMetadataOrder:Array = "sqlResult,title,keyType,dataType,number,string,min,max,year,connection,sqlQuery,sqlParams".split(',');
	
]]>
</mx:Script>
</mx:VBox>

